name:  FastAPI App CI/CD Pipeline
run-name: ${{ github.actor }} is testing out GitHub Actions üöÄ
on: 
  push:
  workflow_dispatch:
    inputs:
      pip-no-cache:
        description: "pip install with no cache"
        default: false
        required: false
        type: boolean
      docker-no-cache:
        description: "Build docker images with no cache"
        default: false
        required: false
        type: boolean    

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: "3.12"      
      - name: Ruff Linter Test
        uses: chartboost/ruff-action@v1
        with:
          src: ./src
          version: 0.1.6
  check-app:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"
      - name: "Cache: Cache Python"
        id: python-cache
        uses: actions/cache@v3.3.1
        with:
          path: ${{env.pythonLocation}}
          key: ${{env.pythonLocation}}-${{hashFiles('requirements.txt')}}
      - name: "Shell: Get pip cache dir"
        id: pip-cache-dir
        if: steps.python-cache.outputs.cache-hit != 'true' || inputs.pip-no-cache == 'true'
        run: |
            python -m pip install -U pip
            pip install -U wheel
            echo "pip-cache-dir=$(pip cache dir)" >> ${GITHUB_OUTPUT}
      - name: "Cache: Cache pip"
        if: steps.python-cache.outputs.cache-hit != 'true' || inputs.pip-no-cache == 'true'
        uses: actions/cache@v3.3.1
        with:
              path: ${{steps.pip-cache-dir.outputs.pip-cache-dir}}
              key: 3.12-${{hashFiles('requirements.txt')}}
              restore-keys: |
                  3.12-${{hashFiles('requirements.txt')}}-
                  3.12-
      - name: "Shell: Install pip dependencies"
        if: steps.python-cache.outputs.cache-hit != 'true' || inputs.pip-no-cache == 'true'
        run: pip install -r requirements.txt      
      - name: Run app tests
        run: |
          pytest ./tests/unit/test.py
  release:
    runs-on: ubuntu-latest
    needs: [lint, check-app]
    steps:          
      - uses: actions/checkout@v4    
      - name: Set AWS credentials
        uses: aws-actions/configure-aws-credentials@v4  
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1
      # https://github.com/aws/containers-roadmap/issues/876#issuecomment-1671148541
      - name: Set up Docker Buildx      
        uses: docker/setup-buildx-action@v3
        with:
          version: latest
          driver-opts: image=moby/buildkit:latest      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2        
      - name: Docker build and push to ECR         
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          tags: ${{ secrets.AWS_REGISTRY_URL }}:latest
          push: true
          no-cache: ${{ inputs.docker-no-cache == true }}
          # use "github api" : https://docs.docker.com/build/cache/backends/gha/
          cache-from: type=gha,scope=${{ github.workflow }}
          cache-to: type=gha,mode=max,scope=${{ github.workflow }}
          # use "s3" : https://github.com/moby/buildkit#s3-cache-experimental
          # cache-from: type=s3,region=ap-northeast-1,bucket=eno-conan-github-cache-bucket,name=${{ github.workflow }}
          # cache-to: type=s3,region=ap-northeast-1,bucket=eno-conan-github-cache-bucket,name=${{ github.workflow }},mode=max
          # use "registry" : https://github.com/aws/containers-roadmap/issues/876#issuecomment-1671148541
          # cache-from: type=registry,ref=${{ steps.login-ecr.outputs.registry }}/${{ vars.FASTAPI_LAMBDA_REPOSITORY_NAME }}:latest-cache
          # cache-to: mode=max,image-manifest=true,type=registry,ref=${{ steps.login-ecr.outputs.registry }}/${{ vars.FASTAPI_LAMBDA_REPOSITORY_NAME }}:latest-cache         
          # outputs: type=registry
          # use "local : https://stackoverflow.com/questions/75811044/github-action-docker-build-push-actionv4-to-ecr-returns-untagged-images
          # cache-from: type=local,src=/tmp/.buildx-cache
          # cache-to: type=local,dest=/tmp/.buildx-cache
          provenance: false # if not set this option, Happened error:InvalidParameterValueException: The image manifest or layer media type for the source image ***:latest is not supported.
      - name: Update Docker image using Lambda
        uses: int128/deploy-lambda-action@v1
        with:
            function-name: ${{ vars.FASTAPI_LAMBDA_FUNCTION_NAME }}
            image-uri: ${{ secrets.AWS_REGISTRY_URL }}:latest
      - run: echo "üçè This job's status is ${{ job.status }}."